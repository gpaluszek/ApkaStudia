{"ast":null,"code":"/**\n * virtual-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport { memo, notUndefined, approxEqual } from './utils.mjs';\nexport { approxEqual, memo, notUndefined } from './utils.mjs';\n\n//\n\n//\n\nvar defaultKeyExtractor = function defaultKeyExtractor(index) {\n  return index;\n};\nvar defaultRangeExtractor = function defaultRangeExtractor(range) {\n  var start = Math.max(range.startIndex - range.overscan, 0);\n  var end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  var arr = [];\n  for (var _i = start; _i <= end; _i++) {\n    arr.push(_i);\n  }\n  return arr;\n};\nvar observeElementRect = function observeElementRect(instance, cb) {\n  var element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  var handler = function handler(rect) {\n    var width = rect.width,\n      height = rect.height;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    if (entry != null && entry.borderBoxSize) {\n      var box = entry.borderBoxSize[0];\n      if (box) {\n        handler({\n          width: box.inlineSize,\n          height: box.blockSize\n        });\n        return;\n      }\n    }\n    handler(element.getBoundingClientRect());\n  });\n  observer.observe(element, {\n    box: 'border-box'\n  });\n  return function () {\n    observer.unobserve(element);\n  };\n};\nvar observeWindowRect = function observeWindowRect(instance, cb) {\n  var element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  var handler = function handler() {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener('resize', handler, {\n    passive: true\n  });\n  return function () {\n    element.removeEventListener('resize', handler);\n  };\n};\nvar observeElementOffset = function observeElementOffset(instance, cb) {\n  var element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  var handler = function handler() {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']);\n  };\n  handler();\n  element.addEventListener('scroll', handler, {\n    passive: true\n  });\n  return function () {\n    element.removeEventListener('scroll', handler);\n  };\n};\nvar observeWindowOffset = function observeWindowOffset(instance, cb) {\n  var element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  var handler = function handler() {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY']);\n  };\n  handler();\n  element.addEventListener('scroll', handler, {\n    passive: true\n  });\n  return function () {\n    element.removeEventListener('scroll', handler);\n  };\n};\nvar measureElement = function measureElement(element, entry, instance) {\n  if (entry != null && entry.borderBoxSize) {\n    var box = entry.borderBoxSize[0];\n    if (box) {\n      var size = Math.round(box[instance.options.horizontal ? 'inlineSize' : 'blockSize']);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? 'width' : 'height']);\n};\nvar windowScroll = function windowScroll(offset, _ref, instance) {\n  var _instance$scrollEleme, _instance$scrollEleme2;\n  var _ref$adjustments = _ref.adjustments,\n    adjustments = _ref$adjustments === void 0 ? 0 : _ref$adjustments,\n    behavior = _ref.behavior;\n  var toOffset = offset + adjustments;\n  (_instance$scrollEleme = instance.scrollElement) == null ? void 0 : _instance$scrollEleme.scrollTo == null ? void 0 : _instance$scrollEleme.scrollTo((_instance$scrollEleme2 = {}, _instance$scrollEleme2[instance.options.horizontal ? 'left' : 'top'] = toOffset, _instance$scrollEleme2.behavior = behavior, _instance$scrollEleme2));\n};\nvar elementScroll = function elementScroll(offset, _ref2, instance) {\n  var _instance$scrollEleme3, _instance$scrollEleme4;\n  var _ref2$adjustments = _ref2.adjustments,\n    adjustments = _ref2$adjustments === void 0 ? 0 : _ref2$adjustments,\n    behavior = _ref2.behavior;\n  var toOffset = offset + adjustments;\n  (_instance$scrollEleme3 = instance.scrollElement) == null ? void 0 : _instance$scrollEleme3.scrollTo == null ? void 0 : _instance$scrollEleme3.scrollTo((_instance$scrollEleme4 = {}, _instance$scrollEleme4[instance.options.horizontal ? 'left' : 'top'] = toOffset, _instance$scrollEleme4.behavior = behavior, _instance$scrollEleme4));\n};\nvar Virtualizer = function Virtualizer(_opts) {\n  var _this = this;\n  this.unsubs = [];\n  this.scrollElement = null;\n  this.isScrolling = false;\n  this.isScrollingTimeoutId = null;\n  this.scrollToIndexTimeoutId = null;\n  this.measurementsCache = [];\n  this.itemSizeCache = new Map();\n  this.pendingMeasuredCacheIndexes = [];\n  this.scrollDirection = null;\n  this.scrollAdjustments = 0;\n  this.measureElementCache = new Map();\n  this.observer = function () {\n    var _ro = null;\n    var get = function get() {\n      if (_ro) {\n        return _ro;\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return _ro = new ResizeObserver(function (entries) {\n          entries.forEach(function (entry) {\n            _this._measureElement(entry.target, entry);\n          });\n        });\n      } else {\n        return null;\n      }\n    };\n    return {\n      disconnect: function disconnect() {\n        var _get;\n        return (_get = get()) == null ? void 0 : _get.disconnect();\n      },\n      observe: function observe(target) {\n        var _get2;\n        return (_get2 = get()) == null ? void 0 : _get2.observe(target, {\n          box: 'border-box'\n        });\n      },\n      unobserve: function unobserve(target) {\n        var _get3;\n        return (_get3 = get()) == null ? void 0 : _get3.unobserve(target);\n      }\n    };\n  }();\n  this.range = {\n    startIndex: 0,\n    endIndex: 0\n  };\n  this.setOptions = function (opts) {\n    Object.entries(opts).forEach(function (_ref3) {\n      var key = _ref3[0],\n        value = _ref3[1];\n      if (typeof value === 'undefined') delete opts[key];\n    });\n    _this.options = _extends({\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: function onChange() {},\n      measureElement: measureElement,\n      initialRect: {\n        width: 0,\n        height: 0\n      },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1\n    }, opts);\n  };\n  this.notify = function () {\n    _this.options.onChange == null ? void 0 : _this.options.onChange(_this);\n  };\n  this.cleanup = function () {\n    _this.unsubs.filter(Boolean).forEach(function (d) {\n      return d();\n    });\n    _this.unsubs = [];\n    _this.scrollElement = null;\n  };\n  this._didMount = function () {\n    _this.measureElementCache.forEach(_this.observer.observe);\n    return function () {\n      _this.observer.disconnect();\n      _this.cleanup();\n    };\n  };\n  this._willUpdate = function () {\n    var scrollElement = _this.options.getScrollElement();\n    if (_this.scrollElement !== scrollElement) {\n      _this.cleanup();\n      _this.scrollElement = scrollElement;\n      _this._scrollToOffset(_this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined\n      });\n      _this.unsubs.push(_this.options.observeElementRect(_this, function (rect) {\n        var prev = _this.scrollRect;\n        _this.scrollRect = rect;\n        if (_this.options.horizontal ? rect.width !== prev.width : rect.height !== prev.height) {\n          _this.maybeNotify();\n        }\n      }));\n      _this.unsubs.push(_this.options.observeElementOffset(_this, function (offset) {\n        _this.scrollAdjustments = 0;\n        if (_this.scrollOffset === offset) {\n          return;\n        }\n        if (_this.isScrollingTimeoutId !== null) {\n          clearTimeout(_this.isScrollingTimeoutId);\n          _this.isScrollingTimeoutId = null;\n        }\n        _this.isScrolling = true;\n        _this.scrollDirection = _this.scrollOffset < offset ? 'forward' : 'backward';\n        _this.scrollOffset = offset;\n        _this.maybeNotify();\n        _this.isScrollingTimeoutId = setTimeout(function () {\n          _this.isScrollingTimeoutId = null;\n          _this.isScrolling = false;\n          _this.scrollDirection = null;\n          _this.maybeNotify();\n        }, _this.options.scrollingDelay);\n      }));\n    }\n  };\n  this.getSize = function () {\n    return _this.scrollRect[_this.options.horizontal ? 'width' : 'height'];\n  };\n  this.memoOptions = memo(function () {\n    return [_this.options.count, _this.options.paddingStart, _this.options.scrollMargin, _this.options.getItemKey];\n  }, function (count, paddingStart, scrollMargin, getItemKey) {\n    _this.pendingMeasuredCacheIndexes = [];\n    return {\n      count: count,\n      paddingStart: paddingStart,\n      scrollMargin: scrollMargin,\n      getItemKey: getItemKey\n    };\n  }, {\n    key: false\n  });\n  this.getFurthestMeasurement = function (measurements, index) {\n    var furthestMeasurementsFound = new Map();\n    var furthestMeasurements = new Map();\n    for (var m = index - 1; m >= 0; m--) {\n      var measurement = measurements[m];\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue;\n      }\n      var previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n      if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n        furthestMeasurements.set(measurement.lane, measurement);\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true);\n      }\n      if (furthestMeasurementsFound.size === _this.options.lanes) {\n        break;\n      }\n    }\n    return furthestMeasurements.size === _this.options.lanes ? Array.from(furthestMeasurements.values()).sort(function (a, b) {\n      return a.end - b.end;\n    })[0] : undefined;\n  };\n  this.getMeasurements = memo(function () {\n    return [_this.memoOptions(), _this.itemSizeCache];\n  }, function (_ref4, itemSizeCache) {\n    var count = _ref4.count,\n      paddingStart = _ref4.paddingStart,\n      scrollMargin = _ref4.scrollMargin,\n      getItemKey = _ref4.getItemKey;\n    var min = _this.pendingMeasuredCacheIndexes.length > 0 ? Math.min.apply(Math, _this.pendingMeasuredCacheIndexes) : 0;\n    _this.pendingMeasuredCacheIndexes = [];\n    var measurements = _this.measurementsCache.slice(0, min);\n    for (var _i2 = min; _i2 < count; _i2++) {\n      var key = getItemKey(_i2);\n      var furthestMeasurement = _this.options.lanes === 1 ? measurements[_i2 - 1] : _this.getFurthestMeasurement(measurements, _i2);\n      var start = furthestMeasurement ? furthestMeasurement.end : paddingStart + scrollMargin;\n      var measuredSize = itemSizeCache.get(key);\n      var size = typeof measuredSize === 'number' ? measuredSize : _this.options.estimateSize(_i2);\n      var end = start + size;\n      var lane = furthestMeasurement ? furthestMeasurement.lane : _i2 % _this.options.lanes;\n      measurements[_i2] = {\n        index: _i2,\n        start: start,\n        size: size,\n        end: end,\n        key: key,\n        lane: lane\n      };\n    }\n    _this.measurementsCache = measurements;\n    return measurements;\n  }, {\n    key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n    debug: function debug() {\n      return _this.options.debug;\n    }\n  });\n  this.calculateRange = memo(function () {\n    return [_this.getMeasurements(), _this.getSize(), _this.scrollOffset];\n  }, function (measurements, outerSize, scrollOffset) {\n    return _this.range = calculateRange({\n      measurements: measurements,\n      outerSize: outerSize,\n      scrollOffset: scrollOffset\n    });\n  }, {\n    key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n    debug: function debug() {\n      return _this.options.debug;\n    }\n  });\n  this.maybeNotify = memo(function () {\n    var range = _this.calculateRange();\n    return [range.startIndex, range.endIndex, _this.isScrolling];\n  }, function () {\n    _this.notify();\n  }, {\n    key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n    debug: function debug() {\n      return _this.options.debug;\n    },\n    initialDeps: [this.range.startIndex, this.range.endIndex, this.isScrolling]\n  });\n  this.getIndexes = memo(function () {\n    return [_this.options.rangeExtractor, _this.calculateRange(), _this.options.overscan, _this.options.count];\n  }, function (rangeExtractor, range, overscan, count) {\n    return rangeExtractor(_extends({}, range, {\n      overscan: overscan,\n      count: count\n    }));\n  }, {\n    key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n    debug: function debug() {\n      return _this.options.debug;\n    }\n  });\n  this.indexFromElement = function (node) {\n    var attributeName = _this.options.indexAttribute;\n    var indexStr = node.getAttribute(attributeName);\n    if (!indexStr) {\n      console.warn(\"Missing attribute name '\" + attributeName + \"={index}' on measured element.\");\n      return -1;\n    }\n    return parseInt(indexStr, 10);\n  };\n  this._measureElement = function (node, entry) {\n    var _this$itemSizeCache$g;\n    var index = _this.indexFromElement(node);\n    var item = _this.measurementsCache[index];\n    if (!item) {\n      return;\n    }\n    var prevNode = _this.measureElementCache.get(item.key);\n    if (!node.isConnected) {\n      _this.observer.unobserve(node);\n      if (node === prevNode) {\n        _this.measureElementCache[\"delete\"](item.key);\n      }\n      return;\n    }\n    if (prevNode !== node) {\n      if (prevNode) {\n        _this.observer.unobserve(prevNode);\n      }\n      _this.observer.observe(node);\n      _this.measureElementCache.set(item.key, node);\n    }\n    var measuredItemSize = _this.options.measureElement(node, entry, _this);\n    var itemSize = (_this$itemSizeCache$g = _this.itemSizeCache.get(item.key)) != null ? _this$itemSizeCache$g : item.size;\n    var delta = measuredItemSize - itemSize;\n    if (delta !== 0) {\n      if (item.start < _this.scrollOffset) {\n        if (process.env.NODE_ENV !== 'production' && _this.options.debug) {\n          console.info('correction', delta);\n        }\n        _this._scrollToOffset(_this.scrollOffset, {\n          adjustments: _this.scrollAdjustments += delta,\n          behavior: undefined\n        });\n      }\n      _this.pendingMeasuredCacheIndexes.push(index);\n      _this.itemSizeCache = new Map(_this.itemSizeCache.set(item.key, measuredItemSize));\n      _this.notify();\n    }\n  };\n  this.measureElement = function (node) {\n    if (!node) {\n      return;\n    }\n    _this._measureElement(node, undefined);\n  };\n  this.getVirtualItems = memo(function () {\n    return [_this.getIndexes(), _this.getMeasurements()];\n  }, function (indexes, measurements) {\n    var virtualItems = [];\n    for (var k = 0, len = indexes.length; k < len; k++) {\n      var _i3 = indexes[k];\n      var measurement = measurements[_i3];\n      virtualItems.push(measurement);\n    }\n    return virtualItems;\n  }, {\n    key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n    debug: function debug() {\n      return _this.options.debug;\n    }\n  });\n  this.getVirtualItemForOffset = function (offset) {\n    var measurements = _this.getMeasurements();\n    return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, function (index) {\n      return notUndefined(measurements[index]).start;\n    }, offset)]);\n  };\n  this.getOffsetForAlignment = function (toOffset, align) {\n    var size = _this.getSize();\n    if (align === 'auto') {\n      if (toOffset <= _this.scrollOffset) {\n        align = 'start';\n      } else if (toOffset >= _this.scrollOffset + size) {\n        align = 'end';\n      } else {\n        align = 'start';\n      }\n    }\n    if (align === 'start') {\n      toOffset = toOffset;\n    } else if (align === 'end') {\n      toOffset = toOffset - size;\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2;\n    }\n    var scrollSizeProp = _this.options.horizontal ? 'scrollWidth' : 'scrollHeight';\n    var scrollSize = _this.scrollElement ? 'document' in _this.scrollElement ? _this.scrollElement.document.documentElement[scrollSizeProp] : _this.scrollElement[scrollSizeProp] : 0;\n    var maxOffset = scrollSize - _this.getSize();\n    return Math.max(Math.min(maxOffset, toOffset), 0);\n  };\n  this.getOffsetForIndex = function (index, align) {\n    if (align === void 0) {\n      align = 'auto';\n    }\n    index = Math.max(0, Math.min(index, _this.options.count - 1));\n    var measurement = notUndefined(_this.getMeasurements()[index]);\n    if (align === 'auto') {\n      if (measurement.end >= _this.scrollOffset + _this.getSize() - _this.options.scrollPaddingEnd) {\n        align = 'end';\n      } else if (measurement.start <= _this.scrollOffset + _this.options.scrollPaddingStart) {\n        align = 'start';\n      } else {\n        return [_this.scrollOffset, align];\n      }\n    }\n    var toOffset = align === 'end' ? measurement.end + _this.options.scrollPaddingEnd : measurement.start - _this.options.scrollPaddingStart;\n    return [_this.getOffsetForAlignment(toOffset, align), align];\n  };\n  this.isDynamicMode = function () {\n    return _this.measureElementCache.size > 0;\n  };\n  this.cancelScrollToIndex = function () {\n    if (_this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(_this.scrollToIndexTimeoutId);\n      _this.scrollToIndexTimeoutId = null;\n    }\n  };\n  this.scrollToOffset = function (toOffset, _temp) {\n    var _ref5 = _temp === void 0 ? {} : _temp,\n      _ref5$align = _ref5.align,\n      align = _ref5$align === void 0 ? 'start' : _ref5$align,\n      behavior = _ref5.behavior;\n    _this.cancelScrollToIndex();\n    if (behavior === 'smooth' && _this.isDynamicMode()) {\n      console.warn('The `smooth` scroll behavior is not fully supported with dynamic size.');\n    }\n    _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior: behavior\n    });\n  };\n  this.scrollToIndex = function (index, _temp2) {\n    var _ref6 = _temp2 === void 0 ? {} : _temp2,\n      _ref6$align = _ref6.align,\n      initialAlign = _ref6$align === void 0 ? 'auto' : _ref6$align,\n      behavior = _ref6.behavior;\n    index = Math.max(0, Math.min(index, _this.options.count - 1));\n    _this.cancelScrollToIndex();\n    if (behavior === 'smooth' && _this.isDynamicMode()) {\n      console.warn('The `smooth` scroll behavior is not fully supported with dynamic size.');\n    }\n    var _this$getOffsetForInd = _this.getOffsetForIndex(index, initialAlign),\n      toOffset = _this$getOffsetForInd[0],\n      align = _this$getOffsetForInd[1];\n    _this._scrollToOffset(toOffset, {\n      adjustments: undefined,\n      behavior: behavior\n    });\n    if (behavior !== 'smooth' && _this.isDynamicMode()) {\n      _this.scrollToIndexTimeoutId = setTimeout(function () {\n        _this.scrollToIndexTimeoutId = null;\n        var elementInDOM = _this.measureElementCache.has(_this.options.getItemKey(index));\n        if (elementInDOM) {\n          var _this$getOffsetForInd2 = _this.getOffsetForIndex(index, align),\n            _toOffset = _this$getOffsetForInd2[0];\n          if (!approxEqual(_toOffset, _this.scrollOffset)) {\n            _this.scrollToIndex(index, {\n              align: align,\n              behavior: behavior\n            });\n          }\n        } else {\n          _this.scrollToIndex(index, {\n            align: align,\n            behavior: behavior\n          });\n        }\n      });\n    }\n  };\n  this.scrollBy = function (delta, _temp3) {\n    var _ref7 = _temp3 === void 0 ? {} : _temp3,\n      behavior = _ref7.behavior;\n    _this.cancelScrollToIndex();\n    if (behavior === 'smooth' && _this.isDynamicMode()) {\n      console.warn('The `smooth` scroll behavior is not fully supported with dynamic size.');\n    }\n    _this._scrollToOffset(_this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior: behavior\n    });\n  };\n  this.getTotalSize = function () {\n    var _this$getMeasurements;\n    return (((_this$getMeasurements = _this.getMeasurements()[_this.options.count - 1]) == null ? void 0 : _this$getMeasurements.end) || _this.options.paddingStart) - _this.options.scrollMargin + _this.options.paddingEnd;\n  };\n  this._scrollToOffset = function (offset, _ref8) {\n    var adjustments = _ref8.adjustments,\n      behavior = _ref8.behavior;\n    _this.options.scrollToFn(offset, {\n      behavior: behavior,\n      adjustments: adjustments\n    }, _this);\n  };\n  this.measure = function () {\n    _this.itemSizeCache = new Map();\n    _this.notify();\n  };\n  this.setOptions(_opts);\n  this.scrollRect = this.options.initialRect;\n  this.scrollOffset = this.options.initialOffset;\n  this.measurementsCache = this.options.initialMeasurementsCache;\n  this.measurementsCache.forEach(function (item) {\n    _this.itemSizeCache.set(item.key, item.size);\n  });\n  this.maybeNotify();\n};\nvar findNearestBinarySearch = function findNearestBinarySearch(low, high, getCurrentValue, value) {\n  while (low <= high) {\n    var middle = (low + high) / 2 | 0;\n    var currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange(_ref9) {\n  var measurements = _ref9.measurements,\n    outerSize = _ref9.outerSize,\n    scrollOffset = _ref9.scrollOffset;\n  var count = measurements.length - 1;\n  var getOffset = function getOffset(index) {\n    return measurements[index].start;\n  };\n  var startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n  var endIndex = startIndex;\n  while (endIndex < count && measurements[endIndex].end < scrollOffset + outerSize) {\n    endIndex++;\n  }\n  return {\n    startIndex: startIndex,\n    endIndex: endIndex\n  };\n}\nexport { Virtualizer, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"names":["defaultKeyExtractor","index","defaultRangeExtractor","range","start","Math","max","startIndex","overscan","end","min","endIndex","count","arr","_i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","round","getBoundingClientRect","observer","ResizeObserver","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","observeWindowRect","innerWidth","innerHeight","addEventListener","passive","removeEventListener","observeElementOffset","options","horizontal","observeWindowOffset","measureElement","size","windowScroll","offset","_ref","_instance$scrollEleme","_instance$scrollEleme2","_ref$adjustments","adjustments","behavior","toOffset","scrollTo","elementScroll","_ref2","_instance$scrollEleme3","_instance$scrollEleme4","_ref2$adjustments","Virtualizer","_opts","_this","unsubs","isScrolling","isScrollingTimeoutId","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","_get","_get2","_get3","setOptions","opts","Object","_ref3","key","value","_extends","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","onChange","initialRect","scrollMargin","scrollingDelay","indexAttribute","initialMeasurementsCache","lanes","notify","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","undefined","prev","scrollRect","maybeNotify","clearTimeout","setTimeout","getSize","memoOptions","memo","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","Array","from","values","sort","a","b","getMeasurements","_ref4","length","apply","slice","_i2","furthestMeasurement","measuredSize","estimateSize","process","env","NODE_ENV","calculateRange","outerSize","initialDeps","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","console","warn","parseInt","_this$itemSizeCache$g","item","prevNode","isConnected","measuredItemSize","itemSize","delta","info","getVirtualItems","indexes","virtualItems","k","len","_i3","getVirtualItemForOffset","notUndefined","findNearestBinarySearch","getOffsetForAlignment","align","scrollSizeProp","scrollSize","document","documentElement","maxOffset","getOffsetForIndex","isDynamicMode","cancelScrollToIndex","scrollToOffset","_temp","_ref5","_ref5$align","scrollToIndex","_temp2","_ref6","_ref6$align","initialAlign","_this$getOffsetForInd","elementInDOM","_this$getOffsetForInd2","_toOffset","approxEqual","scrollBy","_temp3","_ref7","getTotalSize","_this$getMeasurements","_ref8","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","_ref9","getOffset"],"sources":["C:\\xampp\\htdocs\\CourierHR\\webapp\\frontend\\node_modules\\@tanstack\\virtual-core\\src\\index.ts"],"sourcesContent":["import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          const prev = this.scrollRect\n          this.scrollRect = rect\n          if (\n            this.options.horizontal\n              ? rect.width !== prev.width\n              : rect.height !== prev.height\n          ) {\n            this.maybeNotify()\n          }\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort(\n          (a, b) => a.end - b.end,\n        )[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      }))\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private maybeNotify = memo(\n    () => {\n      const range = this.calculateRange()\n\n      return [range.startIndex, range.endIndex, this.isScrolling]\n    },\n    () => {\n      this.notify()\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.range.startIndex,\n        this.range.endIndex,\n        this.isScrolling,\n      ],\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (!node.isConnected) {\n      this.observer.unobserve(node)\n      if (node === prevNode) {\n        this.measureElementCache.delete(item.key)\n      }\n      return\n    }\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n\n      this.itemSizeCache = new Map(\n        this.itemSizeCache.set(item.key, measuredItemSize),\n      )\n\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) -\n    this.options.scrollMargin +\n    this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}